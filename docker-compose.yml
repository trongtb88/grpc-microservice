version: '3'

# Define services
services:
  # App backend service
  eurekaserver:
    # Configuration for building the docker image for the backend service
    build:
      context: eurekaserver
      dockerfile: Dockerfile
    ports:
      - "8761:8761" # Forward the exposed port 6565 on the container to port 6565 on the host machine
    restart: always
    networks: # Networks to join (Services on the same network can communicate with each other using their name and no need of address)
      - backend
  seatservice:
    # Configuration for building the docker image for the backend service
    build:
      context: seatservice
      dockerfile: Dockerfile
    ports:
      - "6565:6565" # Forward the exposed port 6565 on the container to port 6565 on the host machine
    links:
      - eurekaserver
    depends_on:
      - db
      - eurekaserver
    restart: always
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/spring_grpc?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: dea_spring_user
      SPRING_DATASOURCE_PASSWORD: dea_spring_user
    networks: # Networks to join (Services on the same network can communicate with each other using their name and no need of address)
      - backend
  userservice:
    # Configuration for building the docker image for the backend service
    build:
      context: userservice
      dockerfile: Dockerfile
    ports:
      - "7002:7002" # Forward the exposed port 6564 on the container to port 6564 on the host machine
    links:
      - eurekaserver
    depends_on:
      - db
      - eurekaserver
    restart: always
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/spring_grpc?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
      SPRING_DATASOURCE_USERNAME: dea_spring_user
      SPRING_DATASOURCE_PASSWORD: dea_spring_user
    networks: # Networks to join (Services on the same network can communicate with each other using their name and no need of address)
      - backend

  # Database Service (Mysql)
  db:
    image: mysql:latest
    ports:
      - "3306:3306"
    restart: always
    environment:
      MYSQL_DATABASE: spring_grpc
      MYSQL_USER: dea_spring_user
      MYSQL_PASSWORD: dea_spring_user
      MYSQL_ROOT_PASSWORD: dea_spring_user
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - backend
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
      image: 'bitnami/kafka:latest'
      ports:
        - '9092:9092'
      environment:
        - KAFKA_BROKER_ID=1
        - KAFKA_LISTENERS=PLAINTEXT://:9092
        - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
      depends_on:
        - zookeeper
# Volumes
volumes:
  db-data:
networks:
  backend:  